//note:this code has room for improvement. 
//The user may add unclaimed bonus coins to their respective accounts by entering the user id.
//If an inquisitive person wanted to create multiple accounts in a row, and then simply enter an email for the first one, 
//they could then see the first user id and easily guess to enter the url with the subsequent user id's to claim the bonus coins
//for all their other accounts without having to give new email addresses.
//Given the light hearted and money-free nature of the game at this stage, this is not a big issue.
//A more serious context would require instead of a url ending in /:id, a url ending in /:id/:code, 
//where the code is randomly generated and verified on the server end.
//That was actually the original plan.

//Another issue is that (I think) a user can update the email in an account where the coins have been claimed to a fake address,
// and then reuse their real address to claim the coins in a new account.


const resultMessage = document.getElementById("resultMessage");//get message display
//the button is generated by handlebars, and includes the user id provided in the emailed link

async function getBonus(collector) {//send api call to claim bonus coins. 
  let N26= document.getElementById("N26");
  N26.style.display="none";
  try {
    const collect = await fetch("/API/user/bonus", {
      method: "PUT",
      body: JSON.stringify({
        id: collector,
      }),
      headers: {
        "Content-Type": "application/json",
      },
    });
    if (collect.status == 200) {
      collect.json().then((data) => {
        console.log(data);
        resultMessage.innerText = data.message;//display the message (total coins or "you have already claimed your coins")

        setTimeout(() => {
          document.location.replace("/dashboard");
        }, 2000);
      });
    } else {
      resultMessage.innerText = "there seems to be a little problem ";
    }
    

  } catch {
    resultMessage.innerText = "there seems to be a big problem ";
  }
}

// ******************** For BG Image Change**************************//
function handleBG() {
  console.log("this worked");

  const castle = document.querySelector("#castle");
  castle.removeAttribute("class", "bannerC");

  const body = document.querySelector("body");
  body.removeAttribute("class", "bannerA");
  body.setAttribute("class", "bannerB");
}

handleBG();
